Question 1:

Implement a Java program to find the shortest paths from a source vertex to all other vertices in a weighted directed graph using the Bellman-Ford algorithm. 
If the graph contains a negative-weight cycle, report it.

Code:
import java.util.Arrays;

public class BellmanFordAlgorithm {

    static class Edge {
        int source, destination, weight;

        Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }

    static void bellmanFord(int vertices, int edges, Edge[] graph, int source) {
        int[] distance = new int[vertices];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[source] = 0;

        // Relax all edges |V| - 1 times
        for (int i = 1; i < vertices; ++i) {
            for (int j = 0; j < edges; ++j) {
                int u = graph[j].source;
                int v = graph[j].destination;
                int weight = graph[j].weight;

                if (distance[u] != Integer.MAX_VALUE && distance[u] + weight < distance[v]) {
                    distance[v] = distance[u] + weight;
                }
            }
        }

        // Check for negative-weight cycles
        for (int j = 0; j < edges; ++j) {
            int u = graph[j].source;
            int v = graph[j].destination;
            int weight = graph[j].weight;

            if (distance[u] != Integer.MAX_VALUE && distance[u] + weight < distance[v]) {
                System.out.println("Graph contains negative-weight cycle.");
                return;
            }
        }

        // Print the distances
        System.out.println("Shortest distances from source vertex " + source + ":");
        for (int i = 0; i < vertices; ++i) {
            System.out.println("Vertex " + i + ": " + distance[i]);
        }
    }

    public static void main(String[] args) {
        // Example usage
        int vertices = 5;
        int edges = 8;
        Edge[] graph = new Edge[edges];

        // Graph edges: source, destination, weight
        graph[0] = new Edge(0, 1, -1);
        graph[1] = new Edge(0, 2, 4);
        graph[2] = new Edge(1, 2, 3);
        graph[3] = new Edge(1, 3, 2);
        graph[4] = new Edge(1, 4, 2);
        graph[5] = new Edge(3, 2, 5);
        graph[6] = new Edge(3, 1, 1);
        graph[7] = new Edge(4, 3, -3);

        int source = 0;
        bellmanFord(vertices, edges, graph, source);
    }
}


Question 2:

Given a weighted directed graph and a source vertex, modify the Bellman-Ford algorithm to find the shortest paths from the source vertex to all other vertices 
and print the paths.

import java.util.Arrays;
import java.util.Stack;

public class BellmanFordPaths {

    static class Edge {
        int source, destination, weight;

        Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }

    static void bellmanFord(int vertices, int edges, Edge[] graph, int source) {
        int[] distance = new int[vertices];
        int[] parent = new int[vertices];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[source] = 0;

        // Relax all edges |V| - 1 times
        for (int i = 1; i < vertices; ++i) {
            for (int j = 0; j < edges; ++j) {
                int u = graph[j].source;
                int v = graph[j].destination;
                int weight = graph[j].weight;

                if (distance[u] != Integer.MAX_VALUE && distance[u] + weight < distance[v]) {
                    distance[v] = distance[u] + weight;
                    parent[v] = u;
                }
            }
        }

        // Print the paths
        System.out.println("Shortest paths from source vertex " + source + ":");
        for (int i = 0; i < vertices; ++i) {
            if (distance[i] == Integer.MAX_VALUE) {
                System.out.println("Vertex " + i + ": No path");
            } else {
                System.out.print("Vertex " + i + ": " + i);
                printPath(parent, i);
                System.out.println(" (Distance: " + distance[i] + ")");
            }
        }
    }

    static void printPath(int[] parent, int v) {
        Stack<Integer> stack = new Stack<>();
        while (v != 0) {
            stack.push(v);
            v = parent[v];
        }

        while (!stack.isEmpty()) {
            System.out.print(" -> " + stack.pop());
        }
    }

    public static void main(String[] args) {
        // Example usage
        int vertices = 5;
        int edges = 8;
        Edge[] graph = new Edge[edges];

        // Graph edges: source, destination, weight
        graph[0] = new Edge(0, 1, -1);
        graph[1] = new Edge(0, 2, 4);
        graph[2] = new Edge(1, 2, 3);
        graph[3] = new Edge(1, 3, 2);
        graph[4] = new Edge(1, 4, 2);
        graph[5] = new Edge(3, 2, 5);
        graph[6] = new Edge(3, 1, 1);
        graph[7] = new Edge(4, 3, -3);

        int source = 0;
        bellmanFord(vertices, edges, graph, source);
    }
}
